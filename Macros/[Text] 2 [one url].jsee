#include "common.js"
// 导入公共函数定义

// ------------------------------------------------------------------------------------------------

// 🪴  0  使用场景说明

// ------------------------------------------------------------------------------------------------

// text 2 [some urls].jsee
// 数据输入：各种聊天的文本格式的数据
// 数据输出：自己需要的某一类网址
// 数据特征：某一类网址，网址内容会随着时间更新而更新不会过时，比如 github.com

// ------------------------------------------------------------------------------------------------

// 🪴  1  选定需要的网址类型

// var URL_Front = "https://github.com"					// 后文的这一类网址使用 URL_Front 这个变量来指代
Extract_Lines("Normal",URL_Front);						// 因为没有时间限制，所以可以直接选取需要的网址信息
Delete_Indent();										// 删除缩进

// ------------------------------------------------------------------------------------------------

// 🪴  2  提取网址 - 掐头去尾

// 处理头部，直接在网址前面加上换行
Replace_Words("Regex","https","\\nhttps");          // 网址前面加上换行
Overlay_Lines("Normal",URL_Front);							// 提取有网址的文本行

// 处理尾部，统一使用正则替换为换行符
// 🤔有很多网址，内容指向相同但是尾部的非必要符号会有不同，因此尾部处理掉很必要
// 👉对于不可能出现在网址中的字符，可以不用多匹配一个换行符表示只匹配尾部，即直接将这个字符替换为换行符
Replace_Words("Regex"," ", "\\n");					// 空格
Replace_Words("Regex","\\|", "\\n");				// 竖线
Replace_Words("Regex","\\\\", "\\n");				// 反斜杠
Replace_Words("Regex",",", "\\n");					// 英文逗号
Replace_Words("Regex",";", "\\n");					// 英文分号
Replace_Words("Regex","\"", "\\n");					// 英文双引号
Replace_Words("Regex","'", "\\n");					// 英文单引号
Replace_Words("Regex","\\(", "\\n");				// 英文左小括号
Replace_Words("Regex","\\)", "\\n");				// 英文右小括号
Replace_Words("Regex","\\[", "\\n");				// 英文左中括号
Replace_Words("Regex","\\]", "\\n");				// 英文右中括号
Replace_Words("Regex","{", "\\n");					// 英文左大括号
Replace_Words("Regex","}", "\\n");					// 英文右大括号
// 以下字符可能出现在网址中，因此需要多匹配一个换行符加以区别
Replace_Words("Regex","@\\n", "\\n");				// 结尾的@
Replace_Words("Regex","\\.\\n", "\\n");				// 英文句号
Replace_Words("Regex","/\\n", "\\n");				// /
Replace_Words("Regex","#\\n", "\\n");				// #

// ------------------------------------------------------------------------------------------------

// 🪴  3  提取需要的网址

Overlay_Lines("Normal",URL_Front);					// 提取需要的网址
Clean_Text();										// 删除重复行，按字母排序

// ------------------------------------------------------------------------------------------------

// 删除夹杂中文的网址
Delete_Lines("Regex", "[^\\x00-\\xff]");            // 直接删除中文的情况，这个比例很小很小，可以不管

// ------------------------------------------------------------------------------------------------

// 删除网址内部的定位信息

// 根据网址的规律，如果按照斜杠符来制表的话，前 5 列的数据已经可以表示唯一表示一个网址，比如：
// https://github.com/username/projectname				--> 需要 5 列数据
// https://github.com/username?tab=stars				--> 需要 4 列数据
// https://www.bilibili.com/video/BV1a24y1J7oM			--> 需要 5 列数据
// https://ttsmaker.com/zh-cn							--> 需要 4 列数据

// 表示一个网址到底需要多少内容因网址而已，但是后面几列的数据往往是页面内容的详细定位，在多数时候，得到的后续数据是不重要的，可以删除

Replace_Words("Normal", "/", "/,");				        // 斜杠后面加上一个逗号
Make_Table(",");										// 英文逗号制表
document.selection.SelectColumn(6, 20);					// 选中后面的 6 - 20 列的数据（20 是往大估计的数）
editor.ExecuteCommandByID(4033);						// 清除内容（仅限单元格选择模式）
UnMake_Table();											// 标准模式，即文本模式
Replace_Words("Normal",",", "");				// 再把英文逗号删除
Replace_Words("Regex", "/\\n", "\\n");					// 如果网址以 / 结尾，则删除结尾的 /

// 这里选择英文逗号，因为 EmEditor 有默认的逗号制表，并且唯一配对一个 ExecuteCommandByID ，当然选择制表符也是可以的
// 但是选择 / 当作制表符会引起一些麻烦，不建议这么做
// 因为将 / 当作制表符之后，删除了网址内部定位信息之后，回到标准模式会发现 / 未删除，有些网址尾部出现 //
// 比如，网址 https://github.com/YvetteQSystim/Telegram-Data-to-URL-Lines/settings/actions
// 会变成 https://github.com/YvetteQSystim/Telegram-Data-to-URL-Lines// 👈尾部会出现 //
// 某些时候这个尾部不影响网址查询，但是想要删除尾部的 // 的时候需要考虑到不能删除 https:// 中的 // ，这在无形中增加了工作量

// ------------------------------------------------------------------------------------------------

Clean_Text();											// 删除重复行，按字母排序